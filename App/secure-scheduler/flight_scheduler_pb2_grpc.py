# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import flight_scheduler_pb2 as flight_scheduler__pb2

class FlightSchedulerStub(object):
    """The FlightScheduler service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScheduleFlight = channel.unary_unary(
            '/flightscheduler.FlightScheduler/ScheduleFlight',
            request_serializer=flight_scheduler__pb2.ScheduleFlightRequest.SerializeToString,
            response_deserializer=flight_scheduler__pb2.ScheduleFlightResponse.FromString,
        )
        self.GetSchedule = channel.unary_unary(
            '/flightscheduler.FlightScheduler/GetSchedule',
            request_serializer=flight_scheduler__pb2.GetScheduleRequest.SerializeToString,
            response_deserializer=flight_scheduler__pb2.GetScheduleResponse.FromString,
        )

class FlightSchedulerServicer(object):
    """The FlightScheduler service definition.
    """

    def ScheduleFlight(self, request, context):
        """Schedules a flight for a given pilot on a specified date.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSchedule(self, request, context):
        """Retrieves the flight schedule for a specific pilot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlightSchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ScheduleFlight': grpc.unary_unary_rpc_method_handler(
            servicer.ScheduleFlight,
            request_deserializer=flight_scheduler__pb2.ScheduleFlightRequest.FromString,
            response_serializer=flight_scheduler__pb2.ScheduleFlightResponse.SerializeToString,
        ),
        'GetSchedule': grpc.unary_unary_rpc_method_handler(
            servicer.GetSchedule,
            request_deserializer=flight_scheduler__pb2.GetScheduleRequest.FromString,
            response_serializer=flight_scheduler__pb2.GetScheduleResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'flightscheduler.FlightScheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


class FlightScheduler(object):
    """The FlightScheduler service definition.
    """

    @staticmethod
    def ScheduleFlight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flightscheduler.FlightScheduler/ScheduleFlight',
            flight_scheduler__pb2.ScheduleFlightRequest.SerializeToString,
            flight_scheduler__pb2.ScheduleFlightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flightscheduler.FlightScheduler/GetSchedule',
            flight_scheduler__pb2.GetScheduleRequest.SerializeToString,
            flight_scheduler__pb2.GetScheduleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
